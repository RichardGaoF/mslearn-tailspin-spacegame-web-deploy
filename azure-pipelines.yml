
trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  # Container Docker tasks used variables
  webRepository: 'web'
  tag: '$(Build.BuildId)' # specific version of the container being referenced
  # Container Kubernetes tasks used variables
  leaderboardRepository: 'leaderboard'
  imagePullSecret: 'secret'

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

    # Generate a Container image by the Dockerfile to push to Azure Container Registry service
    - task: Docker@2
      displayName: 'Build and push the website image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(webRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.Web/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag) 
        
    # Generate a Container image by the Dockerfile to push to Azure Container Registry service
    - task: Docker@2
      displayName: 'Build and push the leaderboard image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(leaderboardRepository)
        dockerfile: '$(Build.SourcesDirectory)/Tailspin.SpaceGame.LeaderboardContainer/Dockerfile'
        containerRegistry: 'Container Registry Connection'
        tags: |
          $(tag)
    # Publish the manifests file as an Artifact
    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests

  - job: BuildDacpac
    pool:
      vmImage: 'windows-2019'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: VSBuild@1
      displayName: 'Build the database project'
      inputs:
        project: '**/*.sqlproj'

    - task: CopyFiles@2
      displayName: 'Copy dacpac file to staging directory'
      inputs:
        contents: |
          Tailspin.SpaceGame.Database/bin/**/*.dacpac
        targetFolder: '$(Build.StagingDirectory)'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: dropDacpac
      condition: succeededOrFailed()

- stage: DBAVerificationScript
  displayName: 'Script database schema changes'
  dependsOn: Build
  jobs:
  - deployment: DBAVerificationScript
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: 'dbaverificationscript'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: Generate schema change script
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              authenticationType: 'server'
              serverName: '$(servername).database.windows.net'
              databaseName: '$(databasename)'
              sqlUsername: '$(adminlogin)'
              sqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Script'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'
          - task: PowerShell@2
            displayName: Show Auto Generated SQL Script
            inputs:
              targetType: 'inline'
              script: | 
                Write-Host "Auto Generated SQL Update Script:"
                Get-Content d:\a\1\s\GeneratedOutputFiles\$(databasename)_Script.sql | foreach {Write-Output $_}

- stage: DBAVerificationApply
  displayName: 'Apply database schema changes'
  dependsOn: DBAVerificationScript
  jobs:
  - deployment: DBAVerificationApply
    pool:
      vmImage: 'windows-2019'
    variables:
    - group: 'Release'
    environment: 'dbaverificationapply'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: dropDacpac
            patterns: '**/*'
          - task: SqlAzureDacpacDeployment@1
            displayName: 'Deploy SQL schema'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              authenticationType: 'server'
              serverName: '$(servername).database.windows.net'
              databaseName: '$(databasename)'
              sqlUsername: '$(adminlogin)'
              sqlPassword: '$(adminPassword)'
              deployType: 'DacpacTask'
              deploymentAction: 'Publish'
              dacpacFile: '$(Pipeline.Workspace)/dropDacpac/Tailspin.SpaceGame.Database/bin/Debug/Tailspin.SpaceGame.Database.dacpac'
              ipDetectionMethod: 'AutoDetect'

- stage: 'Deploy'
  displayName: 'Deploy the container'
  dependsOn: Build
  jobs:
  - job: 'Deploy'
    displayName: 'Deploy job'
    pool:
      vmImage: 'ubuntu-18.04'
    variables:
    - group: Release
    steps:
    - task: AzureWebAppContainer@1
      inputs:
       appName: $(WebAppName)
       azureSubscription: 'Resource Manager - Tailspin - Space Game'
       # Which image is used to generate a container instance that is deployed to the Azure App Service instance 
       imageName: $(RegistryName)/$(webRepository):$(build.buildId)

- stage: 'DeployK8S'
  displayName: 'Deploy the containers(Kubernetes)'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: 'spike.default'  # Manually created in Azure Portal in advance
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          # Get the latest version of manifests from Azure Artifact
          - download: current
            artifact: manifests
          # Task KubernetesManifest@0 manages all of the mainstream deployment operations required for Kubernetes
          # Create an Secret to be able to pull image(s) from ACR 
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret  # creates the shared secret
              secretName: $(imagePullSecret)  # name of the secret to create
              dockerRegistryEndpoint: 'Container Registry Connection' # name of the ACR connection
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'  # name of the AKS connection
              namespace: 'default'  # specifies the Kubernetes namespace this action applies to
          # Deploy the Kubernetes cluster using the manifests, secret, and images from ACR
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'Kubernetes Cluster Connection'  # name of the AKS connection
              namespace: 'default'  # specifies the Kubernetes namespace this action applies to
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              # specifies the list of secrets needed to pull images from the container registry
              imagePullSecrets: |
                $(imagePullSecret)
              # the list of container images to deploy
              containers: |
                $(RegistryName)/$(webRepository):$(tag)
                $(RegistryName)/$(leaderboardRepository):$(tag)

- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: DBAVerificationApply
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: dev
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameDev)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          # Insert the Task in any 'deploy' stage to deploy Azure Functions source code build to relevant environments(Dev, Test, Staging)
          - task: AzureFunctionApp@1
            displayName: 'Azure Function Deploy: leaderboard'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game' # service connection name
              appType: functionAppLinux # Azure Funtions instance based on Linux or Windows
              appName: '$(LeaderboardAppName)'  # Azure Funtions instance name
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/Tailspin.SpaceGame.LeaderboardFunction.zip'
              runtimeStack: DOCKER|microsoft/azure-functions-dotnet-core3.0:3.0 # image
              startUpCommand: 'func azure functionapp publish $(functionAppName) --no-bundler' # required for Linux
          # Insert the Task to configure the App Service webapp to use the Azure Functions app 'leaderboard' API
          - task: AzureAppServiceSettings@1
            displayName: 'Update web app settings'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: $(WebAppName)
              resourceGroupName: $(ResourceGroupName)
              appSettings: |
                [
                  {
                    "name": "AppSettings:LeaderboardFunctionUrl",
                    "value": "http://$(LeaderboardAppName).azurewebsites.net/api/LeaderboardFunction",
                    "slotSetting": false
                  }
                ]

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: test
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              appName: '$(WebAppNameTest)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-18.04'
    environment: staging
    variables:
    - group: 'Release'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
          - task: AzureWebApp@1
            displayName: 'Azure App Service Deploy: website'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              # Deploy to 'swap' slot first
              deployToSlotOrASE: 'true' # Deploy to an existing deployment slot when 'true'
              resourceGroupName: 'tailspin-space-game-rg'
              slotName: 'swap'  # Target slot name where deploy build to
              ### End ###
              appName: '$(WebAppNameStaging)'
              package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
          # Swap deployment slot from 'swap' to default one 'production'
          - task: AzureAppServiceManage@0
            displayName: 'Swap deployment slots'
            inputs:
              azureSubscription: 'Resource Manager - Tailspin - Space Game'
              resourceGroupName: 'tailspin-space-game-rg'
              webAppName: '$(WebAppNameStaging)'
              sourceSlot: 'swap'
              targetSlot: 'production'
              action: 'Swap Slots'

