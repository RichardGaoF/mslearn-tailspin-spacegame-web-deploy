trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'simulation'

# Define a Scheduled Trigger that is applied on the 'Test' stage below
schedules:
- cron: '30 12 * * *'
  displayName: Deploy every day at 3 A.M.
  branches:
    include:
    - simulation
  always: false 

stages:
- stage: 'Build'
  displayName: 'Build the web application'
  jobs: 
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
      inputs:
        version: '$(dotnetSdkVersion)'

    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false

    - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
      displayName: 'Compile Sass assets'

    - task: gulp@1
      displayName: 'Run gulp tasks'

    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)!!!" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

    - task: DotNetCoreCLI@2
      displayName: 'Restore project dependencies'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build the project - $(buildConfiguration)'
      inputs:
        command: 'build'
        arguments: '--no-restore --configuration $(buildConfiguration)'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Publish the project - $(buildConfiguration)'
      inputs:
        command: 'publish'
        projects: '**/*.csproj'
        publishWebProjects: false
        arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
        zipAfterPublish: true

    - publish: '$(Build.ArtifactStagingDirectory)'
      artifact: drop

### If the deployments for Dev, Test and Staging environment have same jobs/tasks, we can use template skill 
- stage: 'Dev'
  displayName: 'Deploy to the dev environment'
  dependsOn: Build
  # Deploy the build to Dev environment only when 
  # all previous stage secceeds AND 
  # built-inÂ variable Build.SourceBranchName means currently used code branch is 'release' 
  condition: |
    and
    (
      succeeded(),
      eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
    )
  jobs:
  - job: 'Build'
    displayName: 'Simuate deploying to Dev environment'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm
    
    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)!!!" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

- stage: 'Test'
  displayName: 'Deploy to the test environment'
  dependsOn: Dev
  condition: eq(variables['Build.Reason'], 'Schedule')
  jobs:
  - job: 'Build'
    displayName: 'Simuate deploying to Test environment'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)!!!" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)

- stage: 'Staging'
  displayName: 'Deploy to the staging environment'
  dependsOn: Test
  jobs:
  - job: 'Build'
    displayName: 'Simuate deploying to Staging environment'
    pool:
      vmImage: 'ubuntu-18.04'
      demands:
      - npm

    variables:
      wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
      dotnetSdkVersion: '3.1.300'

    steps:
    - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)!!!" > buildinfo.txt'
      displayName: 'Write build info'
      workingDirectory: $(wwwrootDir)